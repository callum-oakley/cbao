(def nil primitive/nil)
(def cons primitive/cons)
(def car primitive/car)
(def cdr primitive/cdr)

(def (list . xs) xs)

(def (reduce f acc xs)
  (if xs
    (reduce f (f acc (car xs)) (cdr xs))
    acc))

(def (+ . xs)
  (reduce primitive/add 0 xs))

(def (* . xs)
  (reduce primitive/mul 1 xs))

(def (- . xs)
  (if xs
    (if (cdr xs)
      (reduce primitive/sub (car xs) (cdr xs))
      (primitive/sub 0 (car xs)))
    0))

(def (/ . xs)
  (if xs
    (if (cdr xs)
      (reduce primitive/div (car xs) (cdr xs))
      (primitive/div 1 (car xs)))
    1))

(def (count xs)
  (reduce (fn (c _) (+ c 1)) 0 xs))

(def (reduce* f acc xs)
  (if xs
    (f (car xs) (reduce* f acc (cdr xs)))
    acc))

(def (map f xs)
  (reduce* (fn (x acc) (cons (f x) acc)) nil xs))

(def (filter f xs)
  (reduce* (fn (x acc) (if (f x) (cons x acc) acc)) nil xs))

(def (cat . xs)
  (def (cat-2 xs ys)
    (if xs
      (cons (car xs) (cat (cdr xs) ys))
      ys))
  (reduce cat-2 nil xs))

(defmacro (and x . xs)
  (if xs
    `(if ~x (and ~@xs))
    x))

(defmacro (or x . xs)
  (if xs
    `(if ~x ~x (or ~@xs))
    x))

(def (not x)
  (if x nil 'true))

(def (take n xs)
  (if (and (primitive/lt 0 n) xs)
    (cons (car xs) (take (- n 1) (cdr xs)))))

(def (drop n xs)
  (if (and (primitive/lt 0 n) xs)
    (drop (- n 1) (cdr xs))
    xs))

(def (chunks n xs)
  (if xs
    (cons (take n xs) (chunks n (drop n xs)))))

(def (windows n xs)
  (def (loop i xs)
    (if (primitive/lte 0 i)
      (cons (take n xs) (loop (- i 1) (cdr xs)))))
  (loop (- (count xs) n) xs))

(def (= . xs)
  (all (fn ((x y)) (primitive/eq x y)) (windows 2 xs)))

(def (< . xs)
  (all (fn ((x y)) (primitive/lt x y)) (windows 2 xs)))

(def (<=. xs)
  (all (fn ((x y)) (primitive/lte x y)) (windows 2 xs)))

(def (range start finish)
  (if (< start finish)
    (cons start (range (+ start 1) finish))))

(def (all f xs)
  (if xs
    (and (f (car xs)) (all f (cdr xs)))
    'true))

(def (any f xs)
  (if xs
    (or (f (car xs)) (any f (cdr xs)))
    'false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(windows 3 (range 0 10))
